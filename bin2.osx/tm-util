#!/usr/bin/env bash
set -o errexit
export PATH=/usr/local/bin:/opt/homebrew/bin:/usr/sbin:/usr/bin:$PATH

# Min free gigs
MINFREE=200
TMUTIL=/usr/bin/tmutil

VOL=$($TMUTIL destinationinfo -X | plutil -convert json -o - - | jq -r '.Destinations[0].Name')
MNT=$($TMUTIL destinationinfo -X | plutil -convert json -o - - | jq -r '.Destinations[0].MountPoint')

tmfree() {
    diskutil list "$VOL" > /dev/null || return 1
    diskutil info -plist "$VOL" | plutil -convert json -o - - | jq '.APFSContainerFree/1024/1024/1024 | floor'
}

tmprune() {
    [[ "$MNT" ]] && tmfree >/dev/null || exit 1
    local DIR
    while true ;do
        local FREE=$(tmfree)
        if (( FREE < MINFREE )) ;then
            local OLDEST=$($TMUTIL listbackups -d "$MNT" | grep backup | sort | head -1)
            echo "Free: $FREE; Purge: $OLDEST at $MNT"
            local TS=${OLDEST%.backup}
            sudo $TMUTIL delete -d "$MNT" -t "$TS"
            sleep 30 # Apparantly needs some grace time to stabilize free space
        else
            echo "Free: $FREE > $MINFREE"
            break
        fi
    done
}

tmbackup() {
    diskutil mount "$VOL"
    tmfree >/dev/null || exit 1
    echo "==> $(date) - $(tminfo)" >> /tmp/tm-backup.log
    (( $(tmfree) < MINFREE )) && tmprune | tee -a /tmp/tm-backup.log
    $TMUTIL startbackup --auto
}

tminfo() {
    echo "Time machine on '$VOL' at '$MNT'"
    echo "Free space $(tmfree) GB. Enforce $MINFREE GB"
}

tmhelp() {
    cat << EOF
Usage: ${0##*/} <verb>
  help:   This text
  prune:  Prune until free space >= $MINFREE GB
  backup: Prune and then backup with tmutil
  info:   Show volume & free space in GB
EOF
}

if [[ $# -lt 1 ]] ;then
    tmhelp
    exit
fi
DO=$1 ; shift
tm$DO "$@"
